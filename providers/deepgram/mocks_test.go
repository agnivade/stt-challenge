// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package deepgram

import (
	mock "github.com/stretchr/testify/mock"
)

// newMockdgWriter creates a new instance of mockdgWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockdgWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockdgWriter {
	mock := &mockdgWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockdgWriter is an autogenerated mock type for the dgWriter type
type mockdgWriter struct {
	mock.Mock
}

type mockdgWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockdgWriter) EXPECT() *mockdgWriter_Expecter {
	return &mockdgWriter_Expecter{mock: &_m.Mock}
}

// Stop provides a mock function for the type mockdgWriter
func (_mock *mockdgWriter) Stop() {
	_mock.Called()
	return
}

// mockdgWriter_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type mockdgWriter_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *mockdgWriter_Expecter) Stop() *mockdgWriter_Stop_Call {
	return &mockdgWriter_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *mockdgWriter_Stop_Call) Run(run func()) *mockdgWriter_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockdgWriter_Stop_Call) Return() *mockdgWriter_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockdgWriter_Stop_Call) RunAndReturn(run func()) *mockdgWriter_Stop_Call {
	_c.Run(run)
	return _c
}

// Write provides a mock function for the type mockdgWriter
func (_mock *mockdgWriter) Write(p []byte) (int, error) {
	ret := _mock.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return returnFunc(p)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = returnFunc(p)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockdgWriter_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type mockdgWriter_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - p []byte
func (_e *mockdgWriter_Expecter) Write(p interface{}) *mockdgWriter_Write_Call {
	return &mockdgWriter_Write_Call{Call: _e.mock.On("Write", p)}
}

func (_c *mockdgWriter_Write_Call) Run(run func(p []byte)) *mockdgWriter_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockdgWriter_Write_Call) Return(n int, err error) *mockdgWriter_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *mockdgWriter_Write_Call) RunAndReturn(run func(p []byte) (int, error)) *mockdgWriter_Write_Call {
	_c.Call.Return(run)
	return _c
}
