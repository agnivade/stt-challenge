// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/agnivade/stt_challenge/providers"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

type MockProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvider) EXPECT() *MockProvider_Expecter {
	return &MockProvider_Expecter{mock: &_m.Mock}
}

// NewSession provides a mock function for the type MockProvider
func (_mock *MockProvider) NewSession(ctx context.Context, config providers.SessionConfig) (providers.Session, error) {
	ret := _mock.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for NewSession")
	}

	var r0 providers.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, providers.SessionConfig) (providers.Session, error)); ok {
		return returnFunc(ctx, config)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, providers.SessionConfig) providers.Session); ok {
		r0 = returnFunc(ctx, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(providers.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, providers.SessionConfig) error); ok {
		r1 = returnFunc(ctx, config)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProvider_NewSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewSession'
type MockProvider_NewSession_Call struct {
	*mock.Call
}

// NewSession is a helper method to define mock.On call
//   - ctx context.Context
//   - config providers.SessionConfig
func (_e *MockProvider_Expecter) NewSession(ctx interface{}, config interface{}) *MockProvider_NewSession_Call {
	return &MockProvider_NewSession_Call{Call: _e.mock.On("NewSession", ctx, config)}
}

func (_c *MockProvider_NewSession_Call) Run(run func(ctx context.Context, config providers.SessionConfig)) *MockProvider_NewSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 providers.SessionConfig
		if args[1] != nil {
			arg1 = args[1].(providers.SessionConfig)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProvider_NewSession_Call) Return(session providers.Session, err error) *MockProvider_NewSession_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockProvider_NewSession_Call) RunAndReturn(run func(ctx context.Context, config providers.SessionConfig) (providers.Session, error)) *MockProvider_NewSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSession creates a new instance of MockSession. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSession(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSession {
	mock := &MockSession{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSession is an autogenerated mock type for the Session type
type MockSession struct {
	mock.Mock
}

type MockSession_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSession) EXPECT() *MockSession_Expecter {
	return &MockSession_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockSession
func (_mock *MockSession) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSession_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockSession_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockSession_Expecter) Close() *MockSession_Close_Call {
	return &MockSession_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockSession_Close_Call) Run(run func()) *MockSession_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSession_Close_Call) Return(err error) *MockSession_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSession_Close_Call) RunAndReturn(run func() error) *MockSession_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ReceiveTranscription provides a mock function for the type MockSession
func (_mock *MockSession) ReceiveTranscription() (providers.TranscriptionResult, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReceiveTranscription")
	}

	var r0 providers.TranscriptionResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (providers.TranscriptionResult, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() providers.TranscriptionResult); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(providers.TranscriptionResult)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSession_ReceiveTranscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReceiveTranscription'
type MockSession_ReceiveTranscription_Call struct {
	*mock.Call
}

// ReceiveTranscription is a helper method to define mock.On call
func (_e *MockSession_Expecter) ReceiveTranscription() *MockSession_ReceiveTranscription_Call {
	return &MockSession_ReceiveTranscription_Call{Call: _e.mock.On("ReceiveTranscription")}
}

func (_c *MockSession_ReceiveTranscription_Call) Run(run func()) *MockSession_ReceiveTranscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSession_ReceiveTranscription_Call) Return(transcriptionResult providers.TranscriptionResult, err error) *MockSession_ReceiveTranscription_Call {
	_c.Call.Return(transcriptionResult, err)
	return _c
}

func (_c *MockSession_ReceiveTranscription_Call) RunAndReturn(run func() (providers.TranscriptionResult, error)) *MockSession_ReceiveTranscription_Call {
	_c.Call.Return(run)
	return _c
}

// SendAudio provides a mock function for the type MockSession
func (_mock *MockSession) SendAudio(audioData []byte) error {
	ret := _mock.Called(audioData)

	if len(ret) == 0 {
		panic("no return value specified for SendAudio")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = returnFunc(audioData)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSession_SendAudio_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAudio'
type MockSession_SendAudio_Call struct {
	*mock.Call
}

// SendAudio is a helper method to define mock.On call
//   - audioData []byte
func (_e *MockSession_Expecter) SendAudio(audioData interface{}) *MockSession_SendAudio_Call {
	return &MockSession_SendAudio_Call{Call: _e.mock.On("SendAudio", audioData)}
}

func (_c *MockSession_SendAudio_Call) Run(run func(audioData []byte)) *MockSession_SendAudio_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSession_SendAudio_Call) Return(err error) *MockSession_SendAudio_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSession_SendAudio_Call) RunAndReturn(run func(audioData []byte) error) *MockSession_SendAudio_Call {
	_c.Call.Return(run)
	return _c
}
