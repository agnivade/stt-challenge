// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package google

import (
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/genproto/googleapis/cloud/speech/v1"
)

// newMockstreamingRecognizeClient creates a new instance of mockstreamingRecognizeClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockstreamingRecognizeClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockstreamingRecognizeClient {
	mock := &mockstreamingRecognizeClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockstreamingRecognizeClient is an autogenerated mock type for the streamingRecognizeClient type
type mockstreamingRecognizeClient struct {
	mock.Mock
}

type mockstreamingRecognizeClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockstreamingRecognizeClient) EXPECT() *mockstreamingRecognizeClient_Expecter {
	return &mockstreamingRecognizeClient_Expecter{mock: &_m.Mock}
}

// CloseSend provides a mock function for the type mockstreamingRecognizeClient
func (_mock *mockstreamingRecognizeClient) CloseSend() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseSend")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockstreamingRecognizeClient_CloseSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseSend'
type mockstreamingRecognizeClient_CloseSend_Call struct {
	*mock.Call
}

// CloseSend is a helper method to define mock.On call
func (_e *mockstreamingRecognizeClient_Expecter) CloseSend() *mockstreamingRecognizeClient_CloseSend_Call {
	return &mockstreamingRecognizeClient_CloseSend_Call{Call: _e.mock.On("CloseSend")}
}

func (_c *mockstreamingRecognizeClient_CloseSend_Call) Run(run func()) *mockstreamingRecognizeClient_CloseSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockstreamingRecognizeClient_CloseSend_Call) Return(err error) *mockstreamingRecognizeClient_CloseSend_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockstreamingRecognizeClient_CloseSend_Call) RunAndReturn(run func() error) *mockstreamingRecognizeClient_CloseSend_Call {
	_c.Call.Return(run)
	return _c
}

// Recv provides a mock function for the type mockstreamingRecognizeClient
func (_mock *mockstreamingRecognizeClient) Recv() (*speech.StreamingRecognizeResponse, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Recv")
	}

	var r0 *speech.StreamingRecognizeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*speech.StreamingRecognizeResponse, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *speech.StreamingRecognizeResponse); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*speech.StreamingRecognizeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockstreamingRecognizeClient_Recv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recv'
type mockstreamingRecognizeClient_Recv_Call struct {
	*mock.Call
}

// Recv is a helper method to define mock.On call
func (_e *mockstreamingRecognizeClient_Expecter) Recv() *mockstreamingRecognizeClient_Recv_Call {
	return &mockstreamingRecognizeClient_Recv_Call{Call: _e.mock.On("Recv")}
}

func (_c *mockstreamingRecognizeClient_Recv_Call) Run(run func()) *mockstreamingRecognizeClient_Recv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockstreamingRecognizeClient_Recv_Call) Return(v *speech.StreamingRecognizeResponse, err error) *mockstreamingRecognizeClient_Recv_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *mockstreamingRecognizeClient_Recv_Call) RunAndReturn(run func() (*speech.StreamingRecognizeResponse, error)) *mockstreamingRecognizeClient_Recv_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function for the type mockstreamingRecognizeClient
func (_mock *mockstreamingRecognizeClient) Send(v *speech.StreamingRecognizeRequest) error {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*speech.StreamingRecognizeRequest) error); ok {
		r0 = returnFunc(v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockstreamingRecognizeClient_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type mockstreamingRecognizeClient_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - v *speech.StreamingRecognizeRequest
func (_e *mockstreamingRecognizeClient_Expecter) Send(v interface{}) *mockstreamingRecognizeClient_Send_Call {
	return &mockstreamingRecognizeClient_Send_Call{Call: _e.mock.On("Send", v)}
}

func (_c *mockstreamingRecognizeClient_Send_Call) Run(run func(v *speech.StreamingRecognizeRequest)) *mockstreamingRecognizeClient_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *speech.StreamingRecognizeRequest
		if args[0] != nil {
			arg0 = args[0].(*speech.StreamingRecognizeRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockstreamingRecognizeClient_Send_Call) Return(err error) *mockstreamingRecognizeClient_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockstreamingRecognizeClient_Send_Call) RunAndReturn(run func(v *speech.StreamingRecognizeRequest) error) *mockstreamingRecognizeClient_Send_Call {
	_c.Call.Return(run)
	return _c
}
